import java.util.Arrays;
import java.time.Instant;
import java.util.concurrent.TimeUnit;



//Yixin Wang
//T00735859
	
public class AssignmentOneTest <T extends Comparable<T>> {
    
     /**
	 * Swaps to elements in an array. Used by various sorting algorithms.
	 * 
	 * @param data   the array in which the elements are swapped
	 * @param index1 the index of the first element to be swapped
	 * @param index2 the index of the second element to be swapped
	 */
	private static <T extends Comparable<T>> 
	void swap(T[] data, int index1, int index2)
	{
		T temp = data[index1];
		data[index1] = data[index2];
		data[index2] = temp;
	}

	
	public static <T extends Comparable<T>> 
	void shellSort(T[] data) //array of objects 
    {
		int pass = 0;
		int gap; //initialize gap
		int size = data.length; // set size equal to the legth of the array of objects data
		gap = size/2; // initalize gap = size/2
		//System.out.println("gap "+ gap);
		
		int compareCounter = 0;
		int swapCounter = 0;
		boolean swapflag;
		
		//this do loop will run until there is no more gap, indicates the end of the array
		do {
			swapflag = true; // initalize boolean variable swapflag to true

			//this do loop will run until swapflag is false, meaning the array is sorted
			do {
				swapflag = false; // do until swap flag is false
				for (int s = 0; s < (size - gap); s++){ //when scan is less than size of the gap
					if (data[s].compareTo(data[s + gap]) > 0){ //if the s posistion number of the data is less than the 
						swap(data, s, s + gap);
						swapflag = true;
						swapCounter++;
					}
					compareCounter++;//Everttune the loop runs, compareTo is called
				}
				pass ++;//a pass is made per for loop
				System.out.println("Array After This Pass: " + "#" + pass+ "  " + Arrays.toString(data));// Include an output of the array any time a swap occurs to demonstrate that your code works correctly
			} while (swapflag == true);
			gap = gap/2;
		} while (gap > 0);
        System.out.println("Array After Sorting: " + Arrays.toString(data)); 
		System.out.println("Comparisons: " + compareCounter);
		System.out.println("Swaps: " + swapCounter);
		//System.out.println("pass: " + pass);
	}

    /**
	 * Sorts the specified array of objects using a bubble sort
	 * algorithm.
	 *
	 * @param data the array to be sorted
	 */
	public static <T extends Comparable<T>> 
	void bubbleSort(T[] data)
	{
		int position, scan;
		int compareCounter = 0;
		int swapCounter = 0;
		//int pass = 0; // keep track of the passes in the code, "helps with developing the stop comparing when sorted feature" in bubble sort 2
		
		for (position =  data.length - 1; position >= 0; position--)
		{
			for (scan = 0; scan <= position - 1; scan++)
			{
				compareCounter++; //everytime loop runs if statement, compareTo is called
				if (data[scan].compareTo(data[scan + 1]) > 0)
					swap(data, scan, scan + 1);
					swapCounter++;
			}
			//pass ++; 
			
			
		}
        System.out.println("Array After Sorting: " + Arrays.toString(data));
		System.out.println("Comparisons: " + compareCounter);
		System.out.println("Swaps: " + swapCounter);
		//System.out.println("Pass: " + pass);
	} 


	/* - stop when the list is sorted
	 * - include outputs of the array for each pass
	 * - To make sure, test both methods with set of 10 integers, and 10 sorted sets of 10 integers
	 */
	public static <T extends Comparable<T>> 
	void bubbleSort2(T[] data) 
	{
		int position = data.length-1; //the highest possible in the array 
		int scan = 0;
		int swapCounter = 0;
		int compareCounter =0;
		//int pass = 0;

		boolean swapflag = true; // introducing swapflag for the while loop

		// loop through the array until swapflag is false, meaning the list is sorted
		do{ 
			swapflag = false;//set swap flag to false such that if no swap occurs, no more while loops will run

			for (scan = 0; scan <= position - 1; scan++){
				compareCounter++; //everytime loop runs if statement, compareTo is called

				if (data[scan].compareTo(data[scan + 1]) > 0){
					swap(data, scan, scan + 1);
					swapflag = true;
					swapCounter++;
				}
			}
			//pass++; //count up after each pass through the array

			position--;
		} while (swapflag == true && position >= 0);

		System.out.println("Array After Sorting: " + Arrays.toString(data));
		System.out.println("Comparisons: " + compareCounter);
		System.out.println("Swaps: " + swapCounter);
		//System.out.println("Pass: " + pass);
		
	}


/*unit testing 
  uncomment the target array and the target method calss to test
  test sorting algoritms one at a time*/ 
    public static void main(String[] args) throws InterruptedException
    {
		
		
        AssignmentOneTest<Integer>a = new AssignmentOneTest<Integer>();
		
		
		
        //Integer[] data = {0,1,2,3,4,5,6,7,8,9};//no swaps needed 
		//Integer[] data = {9,8,7,6,5,4,3,2,1,0};//most swaps needed

//Test drivers for #1 Shell Sort		

		Integer [] data = {9,6,8,12,3,1,7}; //Given example for shellsort
		//Integer [] data = {100, 63, 70, 67, 64, 28, 38, 6, 94, 30}; //random set of 10 integers
		//Integer [] data = {25, 4, 8, 79, 51, 46, 50, 85, 94, 80, 61, 93, 34, 64, 29, 67, 82, 39, 18, 37}; // random set of 20 integers

//random and sorted sets of 10, 100, 1000 integers Test driver for #3

		//Integer [] data = {1, 9, 8, 14, 16, 11, 12, 6, 3, 20}; //radom set 10, integer wrapper class array type
		//Integer [] data = {1, 6, 7, 8, 11, 12, 14, 16, 17, 18}; //sorted set 10

		//Integer [] data = {66, 34, 25, 23, 76, 79, 86, 35, 4, 88, 60, 43, 67, 14, 50, 20, 33, 24, 83, 11, 31, 3, 70, 28, 85, 45, 72, 78, 94, 98, 27, 54, 10, 29, 39, 64, 74, 48, 38, 62, 56, 55, 36, 7, 63, 30, 2, 22, 65, 49, 13, 96, 73, 77, 58, 87, 9, 52, 32, 75, 80, 18, 69, 19, 61, 8, 97, 71, 41, 68, 84, 21, 92, 59, 46, 44, 91, 6, 89, 26, 81, 15, 1, 99, 17, 93, 40, 53, 16, 90, 100, 37, 5, 57, 95, 12, 82, 47, 42, 51}; // random set of 100
		//Integer [] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}; // sorted set 100

		//Integer [] data = {797, 238, 917, 908, 724, 358, 322, 689, 944, 25, 47, 611, 31, 444, 181, 419, 405, 234, 367, 149, 140, 222, 914, 340, 366, 249, 760, 94, 647, 198, 813, 622, 155, 258, 24, 674, 199, 903, 553, 103, 624, 528, 988, 232, 591, 516, 644, 858, 782, 302, 754, 645, 133, 656, 866, 779, 193, 565, 608, 826, 525, 454, 124, 666, 475, 408, 460, 830, 721, 373, 762, 881, 370, 918, 229, 106, 776, 942, 230, 8, 953, 170, 146, 714, 681, 242, 585, 497, 461, 581, 584, 399, 2, 316, 125, 947, 911, 929, 432, 451, 301, 290, 627, 417, 219, 121, 324, 176, 499, 387, 478, 145, 667, 785, 859, 730, 164, 78, 954, 403, 821, 485, 23, 398, 527, 287, 118, 505, 255, 507, 295, 515, 811, 100, 885, 474, 899, 891, 3, 372, 362, 458, 599, 934, 915, 446, 700, 873, 498, 770, 649, 845, 590, 416, 325, 694, 582, 205, 52, 135, 621, 950, 685, 430, 214, 169, 965, 963, 9, 512, 780, 251, 386, 825, 794, 625, 330, 250, 900, 244, 972, 880, 677, 97, 605, 783, 983, 548, 712, 840, 54, 808, 509, 406, 662, 646, 207, 92, 487, 259, 116, 530, 614, 567, 291, 800, 83, 923, 967, 537, 586, 878, 726, 767, 260, 583, 711, 968, 843, 554, 50, 37, 273, 550, 16, 549, 270, 131, 896, 293, 5, 38, 748, 870, 648, 907, 17, 161, 890, 142, 856, 759, 113, 195, 197, 706, 433, 62, 935, 974, 824, 868, 562, 746, 167, 664, 317, 932, 781, 563, 635, 938, 684, 541, 740, 927, 449, 440, 732, 300, 73, 703, 540, 467, 823, 910, 773, 860, 612, 976, 442, 396, 869, 11, 285, 215, 59, 323, 443, 928, 248, 107, 709, 580, 318, 922, 465, 615, 851, 453, 423, 122, 889, 864, 904, 231, 413, 750, 15, 305, 476, 970, 638, 352, 48, 838, 916, 284, 670, 315, 275, 906, 678, 68, 979, 308, 937, 893, 855, 87, 288, 836, 989, 186, 74, 651, 279, 481, 817, 143, 30, 96, 246, 439, 623, 331, 434, 875, 256, 282, 412, 58, 532, 472, 21, 752, 342, 799, 309, 39, 961, 832, 346, 743, 378, 812, 949, 526, 999, 849, 529, 879, 589, 110, 679, 661, 996, 71, 697, 190, 801, 137, 44, 33, 337, 629, 984, 854, 303, 653, 809, 482, 819, 926, 617, 157, 147, 940, 552, 42, 312, 573, 109, 204, 500, 511, 872, 407, 538, 486, 837, 751, 374, 348, 650, 56, 842, 304, 210, 971, 802, 27, 385, 687, 610, 171, 607, 64, 209, 756, 314, 105, 160, 63, 180, 597, 815, 778, 757, 22, 383, 546, 758, 265, 604, 240, 488, 172, 393, 982, 774, 389, 220, 327, 555, 990, 544, 791, 969, 810, 411, 613, 701, 311, 79, 32, 43, 237, 424, 80, 975, 397, 956, 570, 10, 675, 705, 521, 130, 946, 588, 683, 364, 579, 882, 506, 29, 20, 296, 844, 368, 435, 483, 90, 6, 152, 639, 733, 510, 704, 886, 738, 441, 741, 410, 436, 235, 490, 427, 592, 36, 76, 272, 692, 353, 545, 81, 676, 163, 28, 431, 392, 593, 415, 792, 473, 496, 576, 191, 959, 132, 535, 731, 578, 469, 357, 642, 60, 452, 992, 669, 895, 102, 484, 634, 636, 173, 569, 924, 747, 628, 986, 672, 70, 206, 7, 630, 168, 402, 798, 153, 841, 313, 960, 831, 744, 894, 351, 388, 336, 369, 494, 188, 49, 568, 289, 876, 522, 429, 307, 213, 359, 862, 55, 208, 807, 892, 349, 126, 138, 492, 806, 262, 57, 338, 493, 420, 239, 98, 654, 438, 981, 898, 641, 909, 34, 717, 814, 306, 883, 699, 718, 184, 633, 921, 347, 227, 26, 12, 575, 139, 332, 91, 998, 148, 418, 112, 857, 254, 698, 680, 596, 631, 151, 192, 977, 480, 609, 994, 978, 784, 871, 381, 951, 962, 165, 835, 428, 400, 286, 715, 394, 261, 559, 877, 912, 281, 958, 955, 463, 1, 228, 539, 941, 414, 223, 930, 973, 226, 376, 298, 867, 765, 221, 668, 695, 543, 326, 761, 839, 514, 853, 861, 652, 531, 827, 828, 707, 804, 763, 84, 603, 558, 297, 178, 53, 925, 120, 594, 104, 224, 334, 185, 382, 536, 595, 503, 45, 755, 203, 283, 691, 450, 793, 818, 997, 67, 404, 710, 196, 202, 41, 363, 749, 299, 271, 225, 422, 156, 75, 101, 18, 128, 320, 166, 456, 936, 365, 660, 735, 943, 123, 218, 350, 686, 421, 931, 719, 335, 489, 520, 640, 361, 519, 445, 201, 462, 111, 134, 619, 333, 268, 269, 189, 141, 108, 727, 491, 542, 905, 154, 95, 602, 321, 897, 524, 464, 502, 682, 495, 863, 769, 865, 375, 243, 371, 643, 88, 85, 572, 136, 233, 985, 829, 952, 533, 513, 344, 665, 852, 1000, 257, 523, 551, 174, 616, 902, 277, 919, 292, 236, 768, 708, 470, 742, 587, 245, 459, 723, 884, 786, 89, 766, 294, 144, 991, 457, 658, 479, 517, 637, 693, 655, 598, 788, 673, 115, 280, 833, 455, 508, 448, 426, 790, 772, 600, 574, 993, 253, 995, 212, 745, 920, 556, 601, 501, 753, 816, 887, 690, 86, 729, 739, 939, 158, 356, 657, 618, 82, 620, 659, 345, 775, 626, 850, 913, 722, 72, 182, 329, 341, 217, 702, 319, 183, 377, 65, 547, 847, 66, 888, 688, 466, 384, 504, 263, 948, 737, 803, 874, 355, 820, 606, 354, 795, 632, 278, 379, 119, 175, 69, 162, 964, 966, 127, 980, 4, 241, 716, 360, 736, 518, 564, 13, 99, 252, 216, 19, 933, 789, 343, 846, 725, 40, 713, 14, 471, 159, 310, 247, 129, 987, 848, 822, 93, 401, 796, 671, 274, 187, 468, 380, 61, 266, 150, 194, 561, 264, 945, 787, 437, 77, 777, 391, 477, 805, 734, 720, 179, 390, 834, 267, 328, 425, 696, 957, 901, 177, 51, 728, 663, 764, 566, 395, 447, 200, 276, 211, 557, 571, 409, 35, 771, 534, 577, 339, 114, 560, 117, 46}; //random set 1000
		//Integer [] data = {}; //sroted set 1000

		
   	 	
		long startTime = System.nanoTime();//start of the stopwatch
       		a.shellSort(data);
    		//a.bubbleSort(data);
       		//a.bubbleSort2(data);
		long endTime = System.nanoTime(); //stop of the stopwatch

		long timeElapsed = endTime - startTime;//Time elapsed in nanoseconds

		System.out.println("Execution time in nanoseconds: " + timeElapsed); //print out time elapsed in nanoseconds
		System.out.println("Execution time in milliseconds: " + timeElapsed / 1000000); //print out time elapsed in milliseconds


    


		}		

    }



